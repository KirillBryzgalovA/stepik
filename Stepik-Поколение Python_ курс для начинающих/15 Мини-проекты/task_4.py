'''
–ê–≤–µ, –¶–µ–∑–∞—Ä—å üå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞. –ö–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å—Ç—Ä–æ–∫–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (—Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ —Å–¥–≤–∏–≥–∞ –Ω–∞ –¥–ª–∏–Ω—É —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞). –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ—á–Ω—ã–º–∏, –∞ –ø—Ä–æ–ø–∏—Å–Ω—ã–µ ‚Äì –ø—Ä–æ–ø–∏—Å–Ω—ã–º–∏.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
'''
eng_lower_alphabet = 'abcdefghijklmnopqrstuvwxyz'
eng_upper_alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
rus_lower_alphabet = "–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è"
rus_upper_alphabet = "–ê–ë–í–ì–î–ï–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø"
symbol = [" ", ",", ".", "!", "?"]

lan = 'e'
chif = 'ch'


def chru(chifr, n, l, fraza):
    arr_res = []
    if l == 'r':
        moch = 32
    if l == 'e':
        moch = 26
    if chifr == 'def':
        n = -n
    for i in range(len(fraza)):
        if fraza[i].isalpha():
            if fraza[i] == fraza[i].upper():
                for j in range(moch):
                    if moch == 32:
                        if fraza[i] == rus_upper_alphabet[j]:
                            arr_res.append(rus_upper_alphabet[(j + n) % moch])
                            break
                    if moch == 26:
                        if fraza[i] == eng_upper_alphabet[j]:
                            arr_res.append(eng_upper_alphabet[(j + n) % moch])
                            break
            elif fraza[i] == fraza[i].lower():
                for j in range(moch):
                    if moch == 32:
                        if fraza[i] == rus_lower_alphabet[j]:
                            arr_res.append(rus_lower_alphabet[(j + n) % moch])
                            break
                    if moch == 26:
                        if fraza[i] == eng_lower_alphabet[j]:
                            arr_res.append(eng_lower_alphabet[(j + n) % moch])
                            break
        else:
            arr_res.append(fraza[i])
    return arr_res


arr_s = [w for w in input().split()]

arr_out = []
for word in arr_s:
    arr_out.append(
        chru(chif, len(word.replace(',', '').replace('.', '').replace('!', '').replace('?', '').replace('"', '')), lan,
             word))

for word in arr_out:
    for i in word:
        print(i, end='')
    print(' ', end='')
