'''
Работаем эффективно
    Дмитрий руководит разделом разработки, поэтому для него важно эффективно распределить задачи. Для этого он собирает от тестеров отзывы и группирует недочеты по трем категориям: bugs, features и design. Он может добавить какую-то недоработку в одну из групп и, после исправления, убрать ее оттуда. Команда всегда занимается исправлением последнего добавленного задания. Задача Дмитрия — исправить как можно больше недочетов до релиза приложения. Напишите программу, которая печатает количество оставшихся недочетов в каждой из групп на момент релиза.

    Формат ввода: строки вида "Добавить в <название группы>: <задание>" или "Убрать задание из <название группы>". Последовательность строк заканчивается строкой "Релиз!".

    Формат вывода: три строки — последний добавленный неисправленный недочет в группах bugs, features и design (именно в таком порядке). Если в какой-то группе все исправлено, для нее нужно вывести "Все исправлено!".
'''

bugs = []
features = []
design = []
commands = {'bugs': bugs, 'features': features, 'design': design}


def add_task(lst, task):
    lst.append(task)


def remove_task(lst):
    return lst.pop()


def size(lst):
    return len(lst)


command = input()

while command != "Релиз!":

    if command.find(":") != -1:
        # если есть : - это значит что задача добавления в стек
        who = command.split(":")[0].split()[-1]
        task = command.split(":")[1].strip()
        add_task(commands[who], task)
    else:
        # задача убрать задание из стека
        who = command.split()[-1]
        remove_task(commands[who])

    command = input()

if size(bugs) > 0:
    print(bugs[-1])
else:
    print("Все исправлено!")

if size(features) > 0:
    print(features[-1])
else:
    print("Все исправлено!")

if size(design) > 0:
    print(design[-1])
else:
    print("Все исправлено!")
